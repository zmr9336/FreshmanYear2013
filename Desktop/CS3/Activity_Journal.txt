4010-250 Project Journal
Python Word Frequency Project

Name: Zachary Richardson

===========  Stage 1  ==========================================
Start
Estimated Time	00 20
Plan:
(Order of implementation, testing approach, estimation technique)
-implement the standard input
-split the lines
-append the words to a new list
-print the list
-test with a basic test file including spaces, caps, and punctuation

Complete
Actual Time	00 25
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issue with split()
-issue with appending to the list
-issue if line was blank
-all issues fixed easily
-created a solid base for the rest of the project that will be easy to use
for the rest of the project (ex. used a list which has many methods)

===========  Stage 2  ==========================================
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, estimation technique)
-use the code from the first stage
-use strip to get rid of trailing punctuation
-remove the numbers
-make words lowercase
-print the output
-test with numbers, punctuation and caps

Complete
Actual Time	00 40
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issue with removing punctuation because removed hyphens as well
-issue removing numbers
-issue when line was numbers and all were removed
-all issues fixed with simple checks in the code
-should be easily transfered to stage 3

===========  Stage 3  ==========================================
Start
Estimated Time	01 00
Plan:
(Order of implementation, testing approach, estimation technique)
-create a dictionary of key,value pairs
-print the dictionary
-test with simple text first (one word file)

Complete
Actual Time	01 25
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issue with printing
-simple loop used to correct issue with printing
-only minor changes to print in descending order needed

===========  Stage 4  ==========================================
Start
Estimated Time	01 00
Plan:
(Order of implementation, testing approach, estimation technique)
-make new function to sort in order
-test using same test as stage 3 to compare
-shouldn't take long since the dictionary is already made from stage 3

Complete
Actual Time	02 00
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issue in sorting by value in dictionary
-issue in sorting by key in dictionary if value was the same
-found OrderedDict which solved all of my issues
-testing all passed

===========  Stage 5  ==========================================
Start
Estimated Time	01 30
Plan:
(Order of implementation, testing approach, estimation technique)
-make new function for printing the graph
-test with same tests as stage 3 and stage 4
-basic code reuse, but actual printing is new
-expect to take longer on this in order to print correctly

Complete
Actual Time	02 00
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issues with printing
-issue finding the length of the longest word
-issue with print formatting
-all issues fixed with the addition of variables and while loops
-completed stage 5 in more time than expected, but more concerned with
better code than timeframe

===========  Stage 6  ==========================================
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, estimation technique)

Complete
Actual Time	00 35
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
-issue with reading the two files
-issue with running if only one file was entered
-all issues fixed with an if/else statement
-runs correctly based on expected outcome

===========  PROJECT SUMMARY REFLECTION  =======================
This project was pretty hard for me.  I usually take a long time with coding
and this project was no different for me.  I heard from other students that
this priject was made up of just endless lines of code, although I did not 
find that to be true.  I was able to condense a lot of my code into list
comprehensions. The most challenging part of the project was the final stage.
I had issues with reading in two files, so i switched from the sys.stdin
input type to the fileinput.input type, which allowed me to search each file
seperately.  After I switched, only minor changes were needed to get the code
to work with both files and remove the necessary words.

My estimation was close to being correct, although I mostly underestimated
how much time it would take to complete the code.  As I went through the later 
stages, my times were worse becuase I ran into ore problems along the 
way.  I hope to be able to improve my times for the future, so that I 
will be more reliable in a job atmosphere.
================================================================
